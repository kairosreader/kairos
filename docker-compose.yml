version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: .docker/api/Dockerfile
    environment:
      - DENO_ENV=${DENO_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_HOST=dragonfly
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
      - AUTH_SERVER_URL=http://auth:4433
      - AUTH_ADMIN_URL=http://auth:4434
    depends_on:
      - db
      - dragonfly
    volumes:
      - .:/app
      - deno-cache:/deno-dir/deps
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.priority=10"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
    command: ["deno", "task", "start:api"]

  content-processor:
    build:
      context: .
      dockerfile: .docker/processor/Dockerfile
    environment:
      - DENO_ENV=${DENO_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_HOST=dragonfly
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MAX_CONTENT_SIZE=${MAX_CONTENT_SIZE}
      - CONTENT_PROCESSING_TIMEOUT=${CONTENT_PROCESSING_TIMEOUT}
    depends_on:
      - db
      - dragonfly
    volumes:
      - .:/app
      - deno-cache:/deno-dir/deps
    command: ["deno", "task", "start:processor"]

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    ulimits:
      memlock: -1
    volumes:
      - dragonfly-data:/data
    command: ["--cluster_mode=emulated", "--lock_on_hashtags"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    build:
      context: .
      dockerfile: .docker/auth/Dockerfile
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AUTH_ADMIN_URL=http://auth:4434
      - APP_URL=${APP_URL}
      - API_URL=http://api:3000
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
      - SMTP_HOST=${SMTP_HOST:-mailslurper}
      - SMTP_PORT=${SMTP_PORT:-1025}
      - SMTP_USER=${SMTP_USER:-test}
      - SMTP_PASS=${SMTP_PASS:-test}
      - SMTP_FROM=${SMTP_FROM:-no-reply@kairos.local}
      - SMTP_SECURE=${SMTP_SECURE:-false}
    depends_on:
      - db
      - mailslurper
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.priority=10"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=4433"
      - "traefik.http.middlewares.auth-stripprefix.stripprefix.prefixes=/auth"
      - "traefik.http.routers.auth.middlewares=auth-stripprefix@docker"

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "4436:4436"
      - "4437:4437"

  client:
    build:
      context: .
      dockerfile: .docker/client/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - api
      - auth
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=PathPrefix(`/`)"
      - "traefik.http.routers.client.priority=1"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.services.client.loadbalancer.server.port=8081"

  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "${API_PORT}:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  postgres-data:
  dragonfly-data:
  deno-cache:
